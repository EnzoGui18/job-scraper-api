services:
  web:
    build: .
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=run.py
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-pass}@db/${POSTGRES_DB:-jobsdb}
      - LINKEDIN_EMAIL=${LINKEDIN_EMAIL}
      - LINKEDIN_PASSWORD=${LINKEDIN_PASSWORD}
      - GLASSDOOR_EMAIL=${GLASSDOOR_EMAIL}
      - GLASSDOOR_PASSWORD=${GLASSDOOR_PASSWORD}
    depends_on:
      - db
      - redis
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - backend

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-pass}
      - POSTGRES_DB=${POSTGRES_DB:-jobsdb}
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: unless-stopped

  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@admin.com}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - backend
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped

  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend
    restart: unless-stopped

  scheduler:
    build: .
    command: python scheduler.py
    depends_on:
      - web
      - db
      - redis
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-user}:${POSTGRES_PASSWORD:-pass}@db/${POSTGRES_DB:-jobsdb}
      - REDIS_URL=redis://default:${REDIS_PASSWORD:-redispass}@redis:6379/0
    networks:
      - backend
    restart: unless-stopped
    volumes:
      - ./app:/app/app
      - ./logs:/app/logs

networks:
  backend:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  pgadmin_data: